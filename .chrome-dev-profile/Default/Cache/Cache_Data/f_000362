import { defaultWindow } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/.cache/vite/client/deps/@vueuse_core.js?v=2fc67382";
import { isClient } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/reka-ui/node_modules/@vueuse/shared/index.mjs?v=2fc67382";
import { ref, watch, nextTick, onUnmounted, computed } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/vue/dist/vue.runtime.esm-bundler.js?v=2fc67382";
import { u as useStateMachine } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/reka-ui/dist/shared/useStateMachine.js?v=2fc67382";

function usePresence(present, node) {
  const stylesRef = ref({});
  const prevAnimationNameRef = ref("none");
  const prevPresentRef = ref(present);
  const initialState = present.value ? "mounted" : "unmounted";
  let timeoutId;
  const ownerWindow = node.value?.ownerDocument.defaultView ?? defaultWindow;
  const { state, dispatch } = useStateMachine(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  const dispatchCustomEvent = (name) => {
    if (isClient) {
      const customEvent = new CustomEvent(name, { bubbles: false, cancelable: false });
      node.value?.dispatchEvent(customEvent);
    }
  };
  watch(
    present,
    async (currentPresent, prevPresent) => {
      const hasPresentChanged = prevPresent !== currentPresent;
      await nextTick();
      if (hasPresentChanged) {
        const prevAnimationName = prevAnimationNameRef.value;
        const currentAnimationName = getAnimationName(node.value);
        if (currentPresent) {
          dispatch("MOUNT");
          dispatchCustomEvent("enter");
          if (currentAnimationName === "none")
            dispatchCustomEvent("after-enter");
        } else if (currentAnimationName === "none" || currentAnimationName === "undefined" || stylesRef.value?.display === "none") {
          dispatch("UNMOUNT");
          dispatchCustomEvent("leave");
          dispatchCustomEvent("after-leave");
        } else {
          const isAnimating = prevAnimationName !== currentAnimationName;
          if (prevPresent && isAnimating) {
            dispatch("ANIMATION_OUT");
            dispatchCustomEvent("leave");
          } else {
            dispatch("UNMOUNT");
            dispatchCustomEvent("after-leave");
          }
        }
      }
    },
    { immediate: true }
  );
  const handleAnimationEnd = (event) => {
    const currentAnimationName = getAnimationName(node.value);
    const isCurrentAnimation = currentAnimationName.includes(
      event.animationName
    );
    const directionName = state.value === "mounted" ? "enter" : "leave";
    if (event.target === node.value && isCurrentAnimation) {
      dispatchCustomEvent(`after-${directionName}`);
      dispatch("ANIMATION_END");
      if (!prevPresentRef.value) {
        const currentFillMode = node.value.style.animationFillMode;
        node.value.style.animationFillMode = "forwards";
        timeoutId = ownerWindow?.setTimeout(() => {
          if (node.value?.style.animationFillMode === "forwards") {
            node.value.style.animationFillMode = currentFillMode;
          }
        });
      }
    }
    if (event.target === node.value && currentAnimationName === "none")
      dispatch("ANIMATION_END");
  };
  const handleAnimationStart = (event) => {
    if (event.target === node.value) {
      prevAnimationNameRef.value = getAnimationName(node.value);
    }
  };
  const watcher = watch(
    node,
    (newNode, oldNode) => {
      if (newNode) {
        stylesRef.value = getComputedStyle(newNode);
        newNode.addEventListener("animationstart", handleAnimationStart);
        newNode.addEventListener("animationcancel", handleAnimationEnd);
        newNode.addEventListener("animationend", handleAnimationEnd);
      } else {
        dispatch("ANIMATION_END");
        if (timeoutId !== void 0)
          ownerWindow?.clearTimeout(timeoutId);
        oldNode?.removeEventListener("animationstart", handleAnimationStart);
        oldNode?.removeEventListener("animationcancel", handleAnimationEnd);
        oldNode?.removeEventListener("animationend", handleAnimationEnd);
      }
    },
    { immediate: true }
  );
  const stateWatcher = watch(state, () => {
    const currentAnimationName = getAnimationName(node.value);
    prevAnimationNameRef.value = state.value === "mounted" ? currentAnimationName : "none";
  });
  onUnmounted(() => {
    watcher();
    stateWatcher();
  });
  const isPresent = computed(
    () => ["mounted", "unmountSuspended"].includes(state.value)
  );
  return {
    isPresent
  };
}
function getAnimationName(node) {
  return node ? getComputedStyle(node).animationName || "none" : "none";
}

export { usePresence as u };
                                       

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlUHJlc2VuY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9QcmVzZW5jZS91c2VQcmVzZW5jZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IFJlZiB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IGRlZmF1bHRXaW5kb3cgfSBmcm9tICdAdnVldXNlL2NvcmUnXG5pbXBvcnQgeyBpc0NsaWVudCB9IGZyb20gJ0B2dWV1c2Uvc2hhcmVkJ1xuaW1wb3J0IHsgY29tcHV0ZWQsIG5leHRUaWNrLCBvblVubW91bnRlZCwgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSdcbmltcG9ydCB7IHVzZVN0YXRlTWFjaGluZSB9IGZyb20gJ0Avc2hhcmVkJ1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJlc2VuY2UoXG4gIHByZXNlbnQ6IFJlZjxib29sZWFuPixcbiAgbm9kZTogUmVmPEhUTUxFbGVtZW50IHwgdW5kZWZpbmVkPixcbikge1xuICBjb25zdCBzdHlsZXNSZWYgPSByZWY8Q1NTU3R5bGVEZWNsYXJhdGlvbj4oe30gYXMgYW55KVxuICBjb25zdCBwcmV2QW5pbWF0aW9uTmFtZVJlZiA9IHJlZjxzdHJpbmc+KCdub25lJylcbiAgY29uc3QgcHJldlByZXNlbnRSZWYgPSByZWYocHJlc2VudClcbiAgY29uc3QgaW5pdGlhbFN0YXRlID0gcHJlc2VudC52YWx1ZSA/ICdtb3VudGVkJyA6ICd1bm1vdW50ZWQnXG4gIGxldCB0aW1lb3V0SWQ6IG51bWJlciB8IHVuZGVmaW5lZFxuICBjb25zdCBvd25lcldpbmRvdyA9IG5vZGUudmFsdWU/Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgPz8gZGVmYXVsdFdpbmRvd1xuXG4gIGNvbnN0IHsgc3RhdGUsIGRpc3BhdGNoIH0gPSB1c2VTdGF0ZU1hY2hpbmUoaW5pdGlhbFN0YXRlLCB7XG4gICAgbW91bnRlZDoge1xuICAgICAgVU5NT1VOVDogJ3VubW91bnRlZCcsXG4gICAgICBBTklNQVRJT05fT1VUOiAndW5tb3VudFN1c3BlbmRlZCcsXG4gICAgfSxcbiAgICB1bm1vdW50U3VzcGVuZGVkOiB7XG4gICAgICBNT1VOVDogJ21vdW50ZWQnLFxuICAgICAgQU5JTUFUSU9OX0VORDogJ3VubW91bnRlZCcsXG4gICAgfSxcbiAgICB1bm1vdW50ZWQ6IHtcbiAgICAgIE1PVU5UOiAnbW91bnRlZCcsXG4gICAgfSxcbiAgfSlcblxuICBjb25zdCBkaXNwYXRjaEN1c3RvbUV2ZW50ID0gKG5hbWU6ICdlbnRlcicgfCAnYWZ0ZXItZW50ZXInIHwgJ2xlYXZlJyB8ICdhZnRlci1sZWF2ZScpID0+IHtcbiAgICAvLyBXZSBvbmx5IGRpc3BhdGNoIHRoaXMgZXZlbnQgYmVjYXVzZSBDdXN0b21FdmVudCBpcyBub3QgYXZhaWxhYmxlIGluIE5vZGUxOFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS91bm92dWUvcmVrYS11aS9pc3N1ZXMvOTMwXG4gICAgaWYgKGlzQ2xpZW50KSB7XG4gICAgICBjb25zdCBjdXN0b21FdmVudCA9IG5ldyBDdXN0b21FdmVudChuYW1lLCB7IGJ1YmJsZXM6IGZhbHNlLCBjYW5jZWxhYmxlOiBmYWxzZSB9KVxuICAgICAgbm9kZS52YWx1ZT8uZGlzcGF0Y2hFdmVudChjdXN0b21FdmVudClcbiAgICB9XG4gIH1cblxuICB3YXRjaChcbiAgICBwcmVzZW50LFxuICAgIGFzeW5jIChjdXJyZW50UHJlc2VudCwgcHJldlByZXNlbnQpID0+IHtcbiAgICAgIGNvbnN0IGhhc1ByZXNlbnRDaGFuZ2VkID0gcHJldlByZXNlbnQgIT09IGN1cnJlbnRQcmVzZW50XG4gICAgICBhd2FpdCBuZXh0VGljaygpXG4gICAgICBpZiAoaGFzUHJlc2VudENoYW5nZWQpIHtcbiAgICAgICAgY29uc3QgcHJldkFuaW1hdGlvbk5hbWUgPSBwcmV2QW5pbWF0aW9uTmFtZVJlZi52YWx1ZVxuICAgICAgICBjb25zdCBjdXJyZW50QW5pbWF0aW9uTmFtZSA9IGdldEFuaW1hdGlvbk5hbWUobm9kZS52YWx1ZSlcblxuICAgICAgICBpZiAoY3VycmVudFByZXNlbnQpIHtcbiAgICAgICAgICBkaXNwYXRjaCgnTU9VTlQnKVxuICAgICAgICAgIGRpc3BhdGNoQ3VzdG9tRXZlbnQoJ2VudGVyJylcbiAgICAgICAgICBpZiAoY3VycmVudEFuaW1hdGlvbk5hbWUgPT09ICdub25lJylcbiAgICAgICAgICAgIGRpc3BhdGNoQ3VzdG9tRXZlbnQoJ2FmdGVyLWVudGVyJylcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChcbiAgICAgICAgICBjdXJyZW50QW5pbWF0aW9uTmFtZSA9PT0gJ25vbmUnIHx8IGN1cnJlbnRBbmltYXRpb25OYW1lID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgIHx8IHN0eWxlc1JlZi52YWx1ZT8uZGlzcGxheSA9PT0gJ25vbmUnXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIElmIHRoZXJlIGlzIG5vIGV4aXQgYW5pbWF0aW9uIG9yIHRoZSBlbGVtZW50IGlzIGhpZGRlbiwgYW5pbWF0aW9ucyB3b24ndCBydW5cbiAgICAgICAgICAvLyBzbyB3ZSB1bm1vdW50IGluc3RhbnRseSBydlxuICAgICAgICAgIGRpc3BhdGNoKCdVTk1PVU5UJylcbiAgICAgICAgICBkaXNwYXRjaEN1c3RvbUV2ZW50KCdsZWF2ZScpXG4gICAgICAgICAgZGlzcGF0Y2hDdXN0b21FdmVudCgnYWZ0ZXItbGVhdmUnKVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIFdoZW4gYHByZXNlbnRgIGNoYW5nZXMgdG8gYGZhbHNlYCwgd2UgY2hlY2sgY2hhbmdlcyB0byBhbmltYXRpb24tbmFtZSB0b1xuICAgICAgICAgICAqIGRldGVybWluZSB3aGV0aGVyIGFuIGFuaW1hdGlvbiBoYXMgc3RhcnRlZC4gV2UgY2hvc2UgdGhpcyBhcHByb2FjaCAocmVhZGluZ1xuICAgICAgICAgICAqIGNvbXB1dGVkIHN0eWxlcykgYmVjYXVzZSB0aGVyZSBpcyBubyBgYW5pbWF0aW9ucnVuYCBldmVudCBhbmQgYGFuaW1hdGlvbnN0YXJ0YFxuICAgICAgICAgICAqIGZpcmVzIGFmdGVyIGBhbmltYXRpb24tZGVsYXlgIGhhcyBleHBpcmVkIHdoaWNoIHdvdWxkIGJlIHRvbyBsYXRlLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0IGlzQW5pbWF0aW5nID0gcHJldkFuaW1hdGlvbk5hbWUgIT09IGN1cnJlbnRBbmltYXRpb25OYW1lXG4gICAgICAgICAgaWYgKHByZXZQcmVzZW50ICYmIGlzQW5pbWF0aW5nKSB7XG4gICAgICAgICAgICBkaXNwYXRjaCgnQU5JTUFUSU9OX09VVCcpXG4gICAgICAgICAgICBkaXNwYXRjaEN1c3RvbUV2ZW50KCdsZWF2ZScpXG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGlzcGF0Y2goJ1VOTU9VTlQnKVxuICAgICAgICAgICAgZGlzcGF0Y2hDdXN0b21FdmVudCgnYWZ0ZXItbGVhdmUnKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgeyBpbW1lZGlhdGU6IHRydWUgfSxcbiAgKVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyaW5nIGFuIEFOSU1BVElPTl9PVVQgZHVyaW5nIGFuIEFOSU1BVElPTl9JTiB3aWxsIGZpcmUgYW4gYGFuaW1hdGlvbmNhbmNlbGBcbiAgICogZXZlbnQgZm9yIEFOSU1BVElPTl9JTiBhZnRlciB3ZSBoYXZlIGVudGVyZWQgYHVubW91bnRTdXNwZW5kZWRgIHN0YXRlLiBTbywgd2VcbiAgICogbWFrZSBzdXJlIHdlIG9ubHkgdHJpZ2dlciBBTklNQVRJT05fRU5EIGZvciB0aGUgY3VycmVudGx5IGFjdGl2ZSBhbmltYXRpb24uXG4gICAqL1xuICBjb25zdCBoYW5kbGVBbmltYXRpb25FbmQgPSAoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KSA9PiB7XG4gICAgY29uc3QgY3VycmVudEFuaW1hdGlvbk5hbWUgPSBnZXRBbmltYXRpb25OYW1lKG5vZGUudmFsdWUpXG4gICAgY29uc3QgaXNDdXJyZW50QW5pbWF0aW9uID0gY3VycmVudEFuaW1hdGlvbk5hbWUuaW5jbHVkZXMoXG4gICAgICBldmVudC5hbmltYXRpb25OYW1lLFxuICAgIClcbiAgICBjb25zdCBkaXJlY3Rpb25OYW1lID0gc3RhdGUudmFsdWUgPT09ICdtb3VudGVkJyA/ICdlbnRlcicgOiAnbGVhdmUnXG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbm9kZS52YWx1ZSAmJiBpc0N1cnJlbnRBbmltYXRpb24pIHtcbiAgICAgIGRpc3BhdGNoQ3VzdG9tRXZlbnQoYGFmdGVyLSR7ZGlyZWN0aW9uTmFtZX1gKVxuICAgICAgZGlzcGF0Y2goJ0FOSU1BVElPTl9FTkQnKVxuXG4gICAgICBpZiAoIXByZXZQcmVzZW50UmVmLnZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRGaWxsTW9kZSA9IG5vZGUudmFsdWUuc3R5bGUuYW5pbWF0aW9uRmlsbE1vZGVcbiAgICAgICAgbm9kZS52YWx1ZS5zdHlsZS5hbmltYXRpb25GaWxsTW9kZSA9ICdmb3J3YXJkcydcbiAgICAgICAgLy8gUmVzZXQgdGhlIHN0eWxlIGFmdGVyIHRoZSBub2RlIGhhZCB0aW1lIHRvIHVubW91bnQgKGZvciBjYXNlc1xuICAgICAgICAvLyB3aGVyZSB0aGUgY29tcG9uZW50IGNob29zZXMgbm90IHRvIHVubW91bnQpLiBEb2luZyB0aGlzIGFueVxuICAgICAgICAvLyBzb29uZXIgdGhhbiBgc2V0VGltZW91dGAgKGUuZy4gd2l0aCBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYClcbiAgICAgICAgLy8gc3RpbGwgY2F1c2VzIGEgZmxhc2guXG4gICAgICAgIHRpbWVvdXRJZCA9IG93bmVyV2luZG93Py5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAobm9kZS52YWx1ZT8uc3R5bGUuYW5pbWF0aW9uRmlsbE1vZGUgPT09ICdmb3J3YXJkcycpIHtcbiAgICAgICAgICAgIG5vZGUudmFsdWUuc3R5bGUuYW5pbWF0aW9uRmlsbE1vZGUgPSBjdXJyZW50RmlsbE1vZGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuICAgIC8vIGlmIG5vIGFuaW1hdGlvbiwgaW1tZWRpYXRlbHkgdHJpZ2dlciAnQU5JTUFUSU9OX0VORCdcbiAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSBub2RlLnZhbHVlICYmIGN1cnJlbnRBbmltYXRpb25OYW1lID09PSAnbm9uZScpXG4gICAgICBkaXNwYXRjaCgnQU5JTUFUSU9OX0VORCcpXG4gIH1cbiAgY29uc3QgaGFuZGxlQW5pbWF0aW9uU3RhcnQgPSAoZXZlbnQ6IEFuaW1hdGlvbkV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gbm9kZS52YWx1ZSkge1xuICAgICAgLy8gaWYgYW5pbWF0aW9uIG9jY3VycmVkLCBzdG9yZSBpdHMgbmFtZSBhcyB0aGUgcHJldmlvdXMgYW5pbWF0aW9uLlxuICAgICAgcHJldkFuaW1hdGlvbk5hbWVSZWYudmFsdWUgPSBnZXRBbmltYXRpb25OYW1lKG5vZGUudmFsdWUpXG4gICAgfVxuICB9XG5cbiAgY29uc3Qgd2F0Y2hlciA9IHdhdGNoKFxuICAgIG5vZGUsXG4gICAgKG5ld05vZGUsIG9sZE5vZGUpID0+IHtcbiAgICAgIGlmIChuZXdOb2RlKSB7XG4gICAgICAgIHN0eWxlc1JlZi52YWx1ZSA9IGdldENvbXB1dGVkU3R5bGUobmV3Tm9kZSlcbiAgICAgICAgbmV3Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25zdGFydCcsIGhhbmRsZUFuaW1hdGlvblN0YXJ0KVxuICAgICAgICBuZXdOb2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmNhbmNlbCcsIGhhbmRsZUFuaW1hdGlvbkVuZClcbiAgICAgICAgbmV3Tm9kZS5hZGRFdmVudExpc3RlbmVyKCdhbmltYXRpb25lbmQnLCBoYW5kbGVBbmltYXRpb25FbmQpXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gVHJhbnNpdGlvbiB0byB0aGUgdW5tb3VudGVkIHN0YXRlIGlmIHRoZSBub2RlIGlzIHJlbW92ZWQgcHJlbWF0dXJlbHkuXG4gICAgICAgIC8vIFdlIGF2b2lkIGRvaW5nIHNvIGR1cmluZyBjbGVhbnVwIGFzIHRoZSBub2RlIG1heSBjaGFuZ2UgYnV0IHN0aWxsIGV4aXN0LlxuICAgICAgICBkaXNwYXRjaCgnQU5JTUFUSU9OX0VORCcpXG5cbiAgICAgICAgaWYgKHRpbWVvdXRJZCAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgIG93bmVyV2luZG93Py5jbGVhclRpbWVvdXQodGltZW91dElkKVxuICAgICAgICBvbGROb2RlPy5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25zdGFydCcsIGhhbmRsZUFuaW1hdGlvblN0YXJ0KVxuICAgICAgICBvbGROb2RlPy5yZW1vdmVFdmVudExpc3RlbmVyKCdhbmltYXRpb25jYW5jZWwnLCBoYW5kbGVBbmltYXRpb25FbmQpXG4gICAgICAgIG9sZE5vZGU/LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGhhbmRsZUFuaW1hdGlvbkVuZClcbiAgICAgIH1cbiAgICB9LFxuICAgIHsgaW1tZWRpYXRlOiB0cnVlIH0sXG4gIClcblxuICBjb25zdCBzdGF0ZVdhdGNoZXIgPSB3YXRjaChzdGF0ZSwgKCkgPT4ge1xuICAgIGNvbnN0IGN1cnJlbnRBbmltYXRpb25OYW1lID0gZ2V0QW5pbWF0aW9uTmFtZShub2RlLnZhbHVlKVxuICAgIHByZXZBbmltYXRpb25OYW1lUmVmLnZhbHVlXG4gICAgICA9IHN0YXRlLnZhbHVlID09PSAnbW91bnRlZCcgPyBjdXJyZW50QW5pbWF0aW9uTmFtZSA6ICdub25lJ1xuICB9KVxuXG4gIG9uVW5tb3VudGVkKCgpID0+IHtcbiAgICB3YXRjaGVyKClcbiAgICBzdGF0ZVdhdGNoZXIoKVxuICB9KVxuXG4gIGNvbnN0IGlzUHJlc2VudCA9IGNvbXB1dGVkKCgpID0+XG4gICAgWydtb3VudGVkJywgJ3VubW91bnRTdXNwZW5kZWQnXS5pbmNsdWRlcyhzdGF0ZS52YWx1ZSksXG4gIClcblxuICByZXR1cm4ge1xuICAgIGlzUHJlc2VudCxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmltYXRpb25OYW1lKG5vZGU/OiBIVE1MRWxlbWVudCkge1xuICByZXR1cm4gbm9kZSA/IGdldENvbXB1dGVkU3R5bGUobm9kZSkuYW5pbWF0aW9uTmFtZSB8fCAnbm9uZScgOiAnbm9uZSdcbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQU1nQixTQUFBLFdBQUEsQ0FDZCxTQUNBLElBQ0EsRUFBQTtBQUNBLEVBQU0sTUFBQSxTQUFBLEdBQVksR0FBeUIsQ0FBQSxFQUFTLENBQUE7QUFDcEQsRUFBTSxNQUFBLG9CQUFBLEdBQXVCLElBQVksTUFBTSxDQUFBO0FBQy9DLEVBQU0sTUFBQSxjQUFBLEdBQWlCLElBQUksT0FBTyxDQUFBO0FBQ2xDLEVBQU0sTUFBQSxZQUFBLEdBQWUsT0FBUSxDQUFBLEtBQUEsR0FBUSxTQUFZLEdBQUEsV0FBQTtBQUNqRCxFQUFJLElBQUEsU0FBQTtBQUNKLEVBQUEsTUFBTSxXQUFjLEdBQUEsSUFBQSxDQUFLLEtBQU8sRUFBQSxhQUFBLENBQWMsV0FBZSxJQUFBLGFBQUE7QUFFN0QsRUFBQSxNQUFNLEVBQUUsS0FBQSxFQUFPLFFBQVMsRUFBQSxHQUFJLGdCQUFnQixZQUFjLEVBQUE7QUFBQSxJQUN4RCxPQUFTLEVBQUE7QUFBQSxNQUNQLE9BQVMsRUFBQSxXQUFBO0FBQUEsTUFDVCxhQUFlLEVBQUE7QUFBQSxLQUNqQjtBQUFBLElBQ0EsZ0JBQWtCLEVBQUE7QUFBQSxNQUNoQixLQUFPLEVBQUEsU0FBQTtBQUFBLE1BQ1AsYUFBZSxFQUFBO0FBQUEsS0FDakI7QUFBQSxJQUNBLFNBQVcsRUFBQTtBQUFBLE1BQ1QsS0FBTyxFQUFBO0FBQUE7QUFDVCxHQUNELENBQUE7QUFFRCxFQUFNLE1BQUEsbUJBQUEsR0FBc0IsQ0FBQyxJQUE0RCxLQUFBO0FBR3ZGLElBQUEsSUFBSSxRQUFVLEVBQUE7QUFDWixNQUFNLE1B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