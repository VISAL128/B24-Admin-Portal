import { defineComponent, computed, watch, onMounted, onUnmounted, createBlock, openBlock, unref, withKeys, withCtx, renderSlot, nextTick } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/vue/dist/vue.runtime.esm-bundler.js?v=54abfa04";
import { i as injectPinInputRootContext } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/reka-ui/dist/PinInput/PinInputRoot.js?v=54abfa04";
import { u as usePrimitiveElement } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/reka-ui/dist/Primitive/usePrimitiveElement.js?v=54abfa04";
import { P as Primitive } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/reka-ui/dist/Primitive/Primitive.js?v=54abfa04";
import { u as useArrowNavigation } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/reka-ui/dist/shared/useArrowNavigation.js?v=54abfa04";
import { g as getActiveElement } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/reka-ui/dist/shared/getActiveElement.js?v=54abfa04";

const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "PinInputInput",
  props: {
    index: {},
    disabled: { type: Boolean },
    asChild: { type: Boolean },
    as: { default: "input" }
  },
  setup(__props) {
    const props = __props;
    const context = injectPinInputRootContext();
    const inputElements = computed(() => Array.from(context.inputElements.value));
    const currentValue = computed(() => context.currentModelValue.value[props.index]);
    const disabled = computed(() => props.disabled || context.disabled.value);
    const isOtpMode = computed(() => context.otp.value);
    const isPasswordMode = computed(() => context.mask.value);
    const { primitiveElement, currentElement } = usePrimitiveElement();
    function handleInput(event) {
      const target = event.target;
      if ((event.data?.length ?? 0) > 1) {
        handleMultipleCharacter(target.value);
        return;
      }
      if (context.isNumericMode.value && !/^\d*$/.test(target.value)) {
        target.value = target.value.replace(/\D/g, "");
        return;
      }
      target.value = target.value.slice(-1);
      updateModelValueAt(props.index, target.value);
      const nextEl = inputElements.value[props.index + 1];
      if (nextEl)
        nextEl.focus();
    }
    function resetPlaceholder() {
      const target = currentElement.value;
      nextTick(() => {
        if (target && !target.value)
          target.placeholder = context.placeholder.value;
      });
    }
    function handleKeydown(event) {
      useArrowNavigation(event, getActiveElement(), void 0, {
        itemsArray: inputElements.value,
        focus: true,
        loop: false,
        arrowKeyOptions: "horizontal",
        dir: context.dir.value
      });
    }
    function handleBackspace(event) {
      event.preventDefault();
      const target = event.target;
      const value = target.value;
      if (value) {
        updateModelValueAt(props.index, "");
      } else {
        const prevEl = inputElements.value[props.index - 1];
        if (prevEl) {
          prevEl.focus();
          updateModelValueAt(props.index - 1, "");
        }
      }
    }
    function handleDelete(event) {
      if (event.key === "Delete") {
        event.preventDefault();
        updateModelValueAt(props.index, "");
      }
    }
    function handleFocus(event) {
      const target = event.target;
      target.setSelectionRange(1, 1);
      if (!target.value)
        target.placeholder = "";
    }
    function handleBlur(event) {
      resetPlaceholder();
    }
    function handlePaste(event) {
      event.preventDefault();
      const clipboardData = event.clipboardData;
      if (!clipboardData)
        return;
      const values = clipboardData.getData("text");
      handleMultipleCharacter(values);
    }
    function handleMultipleCharacter(values) {
      const tempModelValue = [...context.currentModelValue.value];
      const initialIndex = values.length >= inputElements.value.length ? 0 : props.index;
      const lastIndex = Math.min(initialIndex + values.length, inputElements.value.length);
      for (let i = initialIndex; i < lastIndex; i++) {
        const input = inputElements.value[i];
        const value = values[i - initialIndex];
        if (context.isNumericMode.value && !/^\d*$/.test(value))
          continue;
        tempModelValue[i] = value;
        input.focus();
      }
      context.modelValue.value = tempModelValue;
      inputElements.value[lastIndex]?.focus();
    }
    function removeTrailingEmptyStrings(input) {
      let i = input.length - 1;
      while (i >= 0 && input[i] === "") {
        input.pop();
        i--;
      }
      return input;
    }
    function updateModelValueAt(index, value) {
      const tempModelValue = [...context.currentModelValue.value];
      if (context.isNumericMode.value) {
        const num = +value;
        if (value === "" || isNaN(num)) {
          delete tempModelValue[index];
        } else {
          tempModelValue[index] = num;
        }
      } else {
        tempModelValue[index] = value;
      }
      context.modelValue.value = removeTrailingEmptyStrings(tempModelValue);
    }
    watch(currentValue, () => {
      if (!currentValue.value) {
        resetPlaceholder();
      }
    });
    onMounted(() => {
      context.onInputElementChange(currentElement.value);
    });
    onUnmounted(() => {
      context.inputElements?.value.delete(currentElement.value);
    });
    return (_ctx, _cache) => {
      return openBlock(), createBlock(unref(Primitive), {
        ref_key: "primitiveElement",
        ref: primitiveElement,
        autocapitalize: "none",
        as: _ctx.as,
        "as-child": _ctx.asChild,
        autocomplete: isOtpMode.value ? "one-time-code" : "false",
        type: isPasswordMode.value ? "password" : "text",
        inputmode: unref(context).isNumericMode.value ? "numeric" : "text",
        pattern: unref(context).isNumericMode.value ? "[0-9]*" : void 0,
        placeholder: unref(context).placeholder.value,
        value: currentValue.value,
        disabled: disabled.value,
        "data-disabled": disabled.value ? "" : void 0,
        "data-complete": unref(context).isCompleted.value ? "" : void 0,
        "aria-label": `pin input ${_ctx.index + 1} of ${inputElements.value.length}`,
        onInput: _cache[0] || (_cache[0] = ($event) => handleInput($event)),
        onKeydown: [
          withKeys(handleKeydown, ["left", "right", "up", "down", "home", "end"]),
          withKeys(handleBackspace, ["backspace"]),
          withKeys(handleDelete, ["delete"])
        ],
        onFocus: handleFocus,
        onBlur: handleBlur,
        onPaste: handlePaste
      }, {
        default: withCtx(() => [
          renderSlot(_ctx.$slots, "default")
        ]),
        _: 3
      }, 8, ["as", "as-child", "autocomplete", "type", "inputmode", "pattern", "placeholder", "value", "disabled", "data-disabled", "data-complete", "aria-label"]);
    };
  }
});

export { _sfc_main as _ };
                                         

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGluSW5wdXRJbnB1dC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1BpbklucHV0L1BpbklucHV0SW5wdXQudnVlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5pbXBvcnQgdHlwZSB7IFBpbklucHV0VmFsdWUgfSBmcm9tICcuL1BpbklucHV0Um9vdC52dWUnXG5pbXBvcnQgdHlwZSB7IFByaW1pdGl2ZVByb3BzIH0gZnJvbSAnQC9QcmltaXRpdmUnXG5pbXBvcnQgeyBQcmltaXRpdmUsIHVzZVByaW1pdGl2ZUVsZW1lbnQgfSBmcm9tICdAL1ByaW1pdGl2ZSdcbmltcG9ydCB7IGdldEFjdGl2ZUVsZW1lbnQsIHVzZUFycm93TmF2aWdhdGlvbiB9IGZyb20gJ0Avc2hhcmVkJ1xuaW1wb3J0IHsgaW5qZWN0UGluSW5wdXRSb290Q29udGV4dCB9IGZyb20gJy4vUGluSW5wdXRSb290LnZ1ZSdcblxuZXhwb3J0IGludGVyZmFjZSBQaW5JbnB1dElucHV0UHJvcHMgZXh0ZW5kcyBQcmltaXRpdmVQcm9wcyB7XG4gIC8qKiBQb3NpdGlvbiBvZiB0aGUgdmFsdWUgdGhpcyBpbnB1dCBiaW5kcyB0by4gKi9cbiAgaW5kZXg6IG51bWJlclxuICAvKiogV2hlbiBgdHJ1ZWAsIHByZXZlbnRzIHRoZSB1c2VyIGZyb20gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgcGluIGlucHV0ICovXG4gIGRpc2FibGVkPzogYm9vbGVhblxufVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQgc2V0dXAgbGFuZz1cInRzXCI+XG5pbXBvcnQgeyBjb21wdXRlZCwgbmV4dFRpY2ssIG9uTW91bnRlZCwgb25Vbm1vdW50ZWQsIHdhdGNoIH0gZnJvbSAndnVlJ1xuXG5jb25zdCBwcm9wcyA9IHdpdGhEZWZhdWx0cyhkZWZpbmVQcm9wczxQaW5JbnB1dElucHV0UHJvcHM+KCksIHtcbiAgYXM6ICdpbnB1dCcsXG59KVxuXG5jb25zdCBjb250ZXh0ID0gaW5qZWN0UGluSW5wdXRSb290Q29udGV4dCgpXG5jb25zdCBpbnB1dEVsZW1lbnRzID0gY29tcHV0ZWQoKCkgPT4gQXJyYXkuZnJvbShjb250ZXh0LmlucHV0RWxlbWVudHMhLnZhbHVlKSlcbmNvbnN0IGN1cnJlbnRWYWx1ZSA9IGNvbXB1dGVkKCgpID0+IGNvbnRleHQuY3VycmVudE1vZGVsVmFsdWUudmFsdWVbcHJvcHMuaW5kZXhdKVxuXG5jb25zdCBkaXNhYmxlZCA9IGNvbXB1dGVkKCgpID0+IHByb3BzLmRpc2FibGVkIHx8IGNvbnRleHQuZGlzYWJsZWQudmFsdWUpXG5jb25zdCBpc090cE1vZGUgPSBjb21wdXRlZCgoKSA9PiBjb250ZXh0Lm90cC52YWx1ZSlcbmNvbnN0IGlzUGFzc3dvcmRNb2RlID0gY29tcHV0ZWQoKCkgPT4gY29udGV4dC5tYXNrLnZhbHVlKVxuXG5jb25zdCB7IHByaW1pdGl2ZUVsZW1lbnQsIGN1cnJlbnRFbGVtZW50IH0gPSB1c2VQcmltaXRpdmVFbGVtZW50KClcbmZ1bmN0aW9uIGhhbmRsZUlucHV0KGV2ZW50OiBJbnB1dEV2ZW50KSB7XG4gIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50XG5cbiAgaWYgKChldmVudC5kYXRhPy5sZW5ndGggPz8gMCkgPiAxKSB7XG4gICAgaGFuZGxlTXVsdGlwbGVDaGFyYWN0ZXIodGFyZ2V0LnZhbHVlKVxuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKGNvbnRleHQuaXNOdW1lcmljTW9kZS52YWx1ZSAmJiAhL15cXGQqJC8udGVzdCh0YXJnZXQudmFsdWUpKSB7XG4gICAgdGFyZ2V0LnZhbHVlID0gdGFyZ2V0LnZhbHVlLnJlcGxhY2UoL1xcRC9nLCAnJylcbiAgICByZXR1cm5cbiAgfVxuXG4gIHRhcmdldC52YWx1ZSA9IHRhcmdldC52YWx1ZS5zbGljZSgtMSlcbiAgdXBkYXRlTW9kZWxWYWx1ZUF0KHByb3BzLmluZGV4LCB0YXJnZXQudmFsdWUpXG5cbiAgY29uc3QgbmV4dEVsID0gaW5wdXRFbGVtZW50cy52YWx1ZVtwcm9wcy5pbmRleCArIDFdXG4gIGlmIChuZXh0RWwpXG4gICAgbmV4dEVsLmZvY3VzKClcbn1cblxuZnVuY3Rpb24gcmVzZXRQbGFjZWhvbGRlcigpIHtcbiAgY29uc3QgdGFyZ2V0ID0gY3VycmVudEVsZW1lbnQudmFsdWUgYXMgSFRNTElucHV0RWxlbWVudFxuICBuZXh0VGljaygoKSA9PiB7XG4gICAgaWYgKHRhcmdldCAmJiAhdGFyZ2V0LnZhbHVlKVxuICAgICAgdGFyZ2V0LnBsYWNlaG9sZGVyID0gY29udGV4dC5wbGFjZWhvbGRlci52YWx1ZVxuICB9KVxufVxuXG5mdW5jdGlvbiBoYW5kbGVLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gIHVzZUFycm93TmF2aWdhdGlvbihldmVudCwgZ2V0QWN0aXZlRWxlbWVudCgpIGFzIEhUTUxFbGVtZW50LCB1bmRlZmluZWQsIHtcbiAgICBpdGVtc0FycmF5OiBpbnB1dEVsZW1lbnRzLnZhbHVlLFxuICAgIGZvY3VzOiB0cnVlLFxuICAgIGxvb3A6IGZhbHNlLFxuICAgIGFycm93S2V5T3B0aW9uczogJ2hvcml6b250YWwnLFxuICAgIGRpcjogY29udGV4dC5kaXIudmFsdWUsXG4gIH0pXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUJhY2tzcGFjZShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50XG4gIGNvbnN0IHZhbHVlID0gdGFyZ2V0LnZhbHVlXG5cbiAgaWYgKHZhbHVlKSB7XG4gICAgdXBkYXRlTW9kZWxWYWx1ZUF0KHByb3BzLmluZGV4LCAnJylcbiAgfVxuICBlbHNlIHtcbiAgICBjb25zdCBwcmV2RWwgPSBpbnB1dEVsZW1lbnRzLnZhbHVlW3Byb3BzLmluZGV4IC0gMV1cbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuZm9jdXMoKVxuICAgICAgdXBkYXRlTW9kZWxWYWx1ZUF0KHByb3BzLmluZGV4IC0gMSwgJycpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURlbGV0ZShldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICBpZiAoZXZlbnQua2V5ID09PSAnRGVsZXRlJykge1xuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcbiAgICB1cGRhdGVNb2RlbFZhbHVlQXQocHJvcHMuaW5kZXgsICcnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZvY3VzKGV2ZW50OiBGb2N1c0V2ZW50KSB7XG4gIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50XG4gIHRhcmdldC5zZXRTZWxlY3Rpb25SYW5nZSgxLCAxKVxuXG4gIGlmICghdGFyZ2V0LnZhbHVlKVxuICAgIHRhcmdldC5wbGFjZWhvbGRlciA9ICcnXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUJsdXIoZXZlbnQ6IEZvY3VzRXZlbnQpIHtcbiAgcmVzZXRQbGFjZWhvbGRlcigpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZVBhc3RlKGV2ZW50OiBDbGlwYm9hcmRFdmVudCkge1xuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIGNvbnN0IGNsaXBib2FyZERhdGEgPSBldmVudC5jbGlwYm9hcmREYXRhXG4gIGlmICghY2xpcGJvYXJkRGF0YSlcbiAgICByZXR1cm5cblxuICBjb25zdCB2YWx1ZXMgPSBjbGlwYm9hcmREYXRhLmdldERhdGEoJ3RleHQnKVxuICBoYW5kbGVNdWx0aXBsZUNoYXJhY3Rlcih2YWx1ZXMpXG59XG5cbmZ1bmN0aW9uIGhhbmRsZU11bHRpcGxlQ2hhcmFjdGVyKHZhbHVlczogc3RyaW5nKSB7XG4gIGNvbnN0IHRlbXBNb2RlbFZhbHVlID0gWy4uLmNvbnRleHQuY3VycmVudE1vZGVsVmFsdWUudmFsdWVdIGFzIFBpbklucHV0VmFsdWU8dHlwZW9mIGNvbnRleHQudHlwZS52YWx1ZT5cbiAgY29uc3QgaW5pdGlhbEluZGV4ID0gdmFsdWVzLmxlbmd0aCA+PSBpbnB1dEVsZW1lbnRzLnZhbHVlLmxlbmd0aCA/IDAgOiBwcm9wcy5pbmRleFxuICBjb25zdCBsYXN0SW5kZXggPSBNYXRoLm1pbihpbml0aWFsSW5kZXggKyB2YWx1ZXMubGVuZ3RoLCBpbnB1dEVsZW1lbnRzLnZhbHVlLmxlbmd0aClcbiAgZm9yIChsZXQgaSA9IGluaXRpYWxJbmRleDsgaSA8IGxhc3RJbmRleDsgaSsrKSB7XG4gICAgY29uc3QgaW5wdXQgPSBpbnB1dEVsZW1lbnRzLnZhbHVlW2ldXG4gICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaSAtIGluaXRpYWxJbmRleF1cbiAgICBpZiAoY29udGV4dC5pc051bWVyaWNNb2RlLnZhbHVlICYmICEvXlxcZCokLy50ZXN0KHZhbHVlKSlcbiAgICAgIGNvbnRpbnVlXG5cbiAgICB0ZW1wTW9kZWxWYWx1ZVtpXSA9IHZhbHVlXG4gICAgaW5wdXQuZm9jdXMoKVxuICB9XG4gIGNvbnRleHQubW9kZWxWYWx1ZS52YWx1ZSA9IHRlbXBNb2RlbFZhbHVlXG4gIGlucHV0RWxlbWVudHMudmFsdWVbbGFzdEluZGV4XT8uZm9jdXMoKVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFpbGluZ0VtcHR5U3RyaW5ncyhpbnB1dDogUGluSW5wdXRWYWx1ZTx0eXBlb2YgY29udGV4dC50eXBlLnZhbHVlPikge1xuICBsZXQgaSA9IGlucHV0Lmxlbmd0aCAtIDFcblxuICB3aGlsZSAoaSA+PSAwICYmIGlucHV0W2ldID09PSAnJykge1xuICAgIGlucHV0LnBvcCgpXG4gICAgaS0tXG4gIH1cblxuICByZXR1cm4gaW5wdXRcbn1cblxuZnVuY3Rpb24gdXBkYXRlTW9kZWxWYWx1ZUF0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBzdHJpbmcpIHtcbiAgY29uc3QgdGVtcE1vZGVsVmFsdWUgPSBbLi4uY29udGV4dC5jdXJyZW50TW9kZWxWYWx1ZS52YWx1ZV0gYXMgUGluSW5wdXRWYWx1ZTx0eXBlb2YgY29udGV4dC50eXBlLnZhbHVlPlxuXG4gIGlmIChjb250ZXh0LmlzTnVtZXJpY01vZGUudmFsdWUpIHtcbiAgICBjb25zdCBudW0gPSArdmFsdWVcblxuICAgIGlmICh2YWx1ZSA9PT0gJycgfHwgaXNOYU4obnVtKSkge1xuICAgICAgZGVsZXRlIHRlbXBNb2RlbFZhbHVlW2luZGV4XVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRlbXBNb2RlbFZhbHVlW2luZGV4XSA9IG51bVxuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICB0ZW1wTW9kZWxWYWx1ZVtpbmRleF0gPSB2YWx1ZVxuICB9XG5cbiAgY29udGV4dC5tb2RlbFZhbHVlLnZhbHVlID0gcmVtb3ZlVHJhaWxpbmdFbXB0eVN0cmluZ3ModGVtcE1vZGVsVmFsdWUpXG59XG5cbndhdGNoKGN1cnJlbnRWYWx1ZSwgKCkgPT4ge1xuICBpZiAoIWN1cnJlbnRWYWx1ZS52YWx1ZSkge1xuICAgIHJlc2V0UGxhY2Vob2xkZXIoKVxuICB9XG59KVxuXG5vbk1vdW50ZWQoKCkgPT4ge1xuICBjb250ZXh0Lm9uSW5wdXRFbGVtZW50Q2hhbmdlKGN1cnJlbnRFbGVtZW50LnZhbHVlIGFzIEhUTUxJbnB1dEVsZW1lbnQpXG59KVxub25Vbm1vdW50ZWQoKCkgPT4ge1xuICBjb250ZXh0LmlucHV0RWxlbWVudHM/LnZhbHVlLmRlbGV0ZShjdXJyZW50RWxlbWVudC52YWx1ZSBhcyBIVE1MSW5wdXRFbGVtZW50KVxufSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxQcmltaXRpdmVcbiAgICByZWY9XCJwcmltaXRpdmVFbGVtZW50XCJcbiAgICBhdXRvY2FwaXRhbGl6ZT1cIm5vbmVcIlxuICAgIDphcz1cImFzXCJcbiAgICA6YXMtY2hpbGQ9XCJhc0NoaWxkXCJcbiAgICA6YXV0b2NvbXBsZXRlPVwiaXNPdHBNb2RlID8gJ29uZS10aW1lLWNvZGUnIDogJ2ZhbHNlJ1wiXG4gICAgOnR5cGU9XCJpc1Bhc3N3b3JkTW9kZSA/ICdwYXNzd29yZCcgOiAndGV4dCdcIlxuICAgIDppbnB1dG1vZGU9XCJjb250ZXh0LmlzTnVtZXJpY01vZGUudmFsdWUgPyAnbnVtZXJpYycgOiAndGV4dCdcIlxuICAgIDpwYXR0ZXJuPVwiY29udGV4dC5pc051bWVyaWNNb2RlLnZhbHVlID8gJ1swLTldKicgOiB1bmRlZmluZWRcIlxuICAgIDpwbGFjZWhvbGRlcj1cImNvbnRleHQucGxhY2Vob2xkZXIudmFsdWVcIlxuICAgIDp2YWx1ZT1cImN1cnJlbnRWYWx1ZVwiXG4gICAgOmRpc2FibGVkPVwiZGlzYWJsZWRcIlxuICAgIDpkYXRhLWRpc2FibGVkPVwiZGlzYWJsZWQgPyAnJyA6IHVuZGVmaW5lZFwiXG4gICAgOmRhdGEtY29tcGxldGU9XCJjb250ZXh0LmlzQ29tcGxldGVkLnZhbHVlID8gJycgOiB1bmRlZmluZWRcIlxuICAgIDphcmlhLWxhYmVsPVwiYHBpbiBpbnB1dCAke2luZGV4ICsgMX0gb2YgJHtpbnB1dEVsZW1lbnRzLmxlbmd0aH1gXCJcbiAgICBAaW5wdXQ9XCJoYW5kbGVJbnB1dCgkZXZlbnQgYXMgSW5wdXRFdmVudClcIlxuICAgIEBrZXlkb3duLmxlZnQucmlnaHQudXAuZG93bi5ob21lLmVuZD1cImhhbmRsZUtleWRvd25cIlxuICAgIEBrZXlkb3duLmJhY2tzcGFjZT1cImhhbmRsZUJhY2tzcGFjZVwiXG4gICAgQGtleWRvd24uZGVsZXRlPVwiaGFuZGxlRGVsZXRlXCJcbiAgICBAZm9jdXM9XCJoYW5kbGVGb2N1c1wiXG4gICAgQGJsdXI9XCJoYW5kbGVCbHVyXCJcbiAgICBAcGFzdGU9XCJoYW5kbGVQYXN0ZVwiXG4gID5cbiAgICA8c2xvdCAvPlxuICA8L1ByaW1pdGl2ZT5cbjwvdGVtcGxhdGU+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxJQUFBLE1BQU0sS0FBUSxHQUFBLE9BQUE7QUFJZCxJQUFBLE1BQU0sVUFBVSx5QkFBMEIsRUFBQTtBQUMxQyxJQUFNLE1BQUEsYUFBQSxHQUFnQixTQUFTLE1BQU0sS0FBQSxDQUFNLEtBQUssT0FBUSxDQUFBLGFBQUEsQ0FBZSxLQUFL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