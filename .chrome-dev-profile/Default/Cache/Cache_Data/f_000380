import { useNuxtApp } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/nuxt/dist/app/nuxt.js?v=2fc67382";
import { useLocalStorage } from "/_nuxt/composables/useLocalStorage.ts";
import { computed, ref, watch, nextTick } from "/_nuxt/@fs/D:/Bill24/b24managementportal/node_modules/vue/dist/vue.runtime.esm-bundler.js?v=2fc67382";
import { useKeycloakGuard } from "/_nuxt/composables/useKeycloakGuard.ts";
export const useAuth = () => {
  const nuxtApp = useNuxtApp();
  const {
    getStoredKeycloakData,
    clearKeycloakData,
    getStoredToken,
    storeKeycloakData,
    updateStoredTokens
  } = useLocalStorage();
  const keycloak = computed(() => nuxtApp.$keycloak);
  const isAuthenticated = computed(() => nuxtApp.$isAuthenticated?.value ?? false);
  const isInitialized = computed(() => nuxtApp.$isKeycloakInitialized?.value ?? false);
  const initError = computed(() => nuxtApp.$keycloakInitError?.value ?? null);
  const user = ref(null);
  const token = ref(null);
  const refreshToken = ref(null);
  const initializeUserData = () => {
    const keycloakInstance = keycloak.value;
    if (keycloakInstance && keycloakInstance.authenticated) {
      user.value = getUserInfo();
      token.value = keycloakInstance.token || null;
      refreshToken.value = keycloakInstance.refreshToken || null;
      storeKeycloakData(keycloakInstance);
    } else {
      const storedData = getStoredKeycloakData();
      if (storedData && storedData.authenticated) {
        user.value = storedData.user;
        token.value = storedData.token;
        refreshToken.value = storedData.refreshToken;
      } else {
        user.value = null;
        token.value = null;
        refreshToken.value = null;
      }
    }
  };
  const login = async () => {
    const keycloakInstance = keycloak.value;
    if (!keycloakInstance) throw new Error("Keycloak not initialized");
    try {
      await keycloakInstance.login({
        redirectUri: window.location.origin
      });
    } catch (error) {
      console.error("Login failed:", error);
      throw error;
    }
  };
  const logout = async () => {
    const keycloakInstance = keycloak.value;
    if (!keycloakInstance) throw new Error("Keycloak not initialized");
    try {
      const { clearKeycloakState } = useKeycloakGuard();
      clearKeycloakState();
      clearKeycloakData();
      await keycloakInstance.logout({
        redirectUri: window.location.origin
      });
    } catch (error) {
      console.error("Logout failed:", error);
      throw error;
    }
  };
  const register = async () => {
    const keycloakInstance = keycloak.value;
    if (!keycloakInstance) throw new Error("Keycloak not initialized");
    try {
      await keycloakInstance.register({
        redirectUri: window.location.origin
      });
    } catch (error) {
      console.error("Registration failed:", error);
      throw error;
    }
  };
  const getToken = () => {
    const keycloakToken = keycloak.value?.token || null;
    if (keycloakToken) return keycloakToken;
    return getStoredToken();
  };
  const refreshAuthToken = async () => {
    const keycloakInstance = keycloak.value;
    if (!keycloakInstance) return null;
    try {
      const refreshed = await keycloakInstance.updateToken(30);
      if (refreshed) {
        token.value = keycloakInstance.token || null;
        refreshToken.value = keycloakInstance.refreshToken || null;
        const expiresAt = keycloakInstance.tokenParsed?.exp ? keycloakInstance.tokenParsed.exp * 1e3 : null;
        updateStoredTokens(
          keycloakInstance.token || null,
          keycloakInstance.refreshToken || null,
          keycloakInstance.idToken || null,
          expiresAt
        );
        console.log("Token refreshed successfully");
      }
      return keycloakInstance.token || null;
    } catch (error) {
      console.error("Token refresh failed:", error);
      clearKeycloakData();
      await logout();
      return null;
    }
  };
  const updateToken = async (minValidity = 30) => {
    const keycloakInstance = keycloak.value;
    if (!keycloakInstance) return false;
    try {
      const refreshed = await keycloakInstance.updateToken(minValidity);
      if (refreshed) {
        token.value = keycloakInstance.token || null;
        refreshToken.value = keycloakInstance.refreshToken || null;
        const expiresAt = keycloakInstance.tokenParsed?.exp ? keycloakInstance.tokenParsed.exp * 1e3 : null;
        updateStoredTokens(
          keycloakInstance.token || null,
          keycloakInstance.refreshToken || null,
          keycloakInstance.idToken || null,
          expiresAt
        );
      }
      return refreshed;
    } catch (error) {
      console.error("Failed to update token:", error);
      clearKeycloakData();
      return false;
    }
  };
  const isTokenExpired = () => {
    const keycloakInstance = keycloak.value;
    if (!keycloakInstance || !keycloakInstance.token) return true;
    return keycloakInstance.isTokenExpired();
  };
  const getUserInfo = () => {
    const keycloakInstance = keycloak.value;
    if (!keycloakInstance?.tokenParsed) return null;
    const tokenParsed = keycloakInstance.tokenParsed;
    return {
      id: tokenParsed.sub || "",
      username: tokenParsed.preferred_username || "",
      email: tokenParsed.email || "",
      firstName: tokenParsed.given_name || "",
      lastName: tokenParsed.family_name || "",
      fullName: `${tokenParsed.given_name || ""} ${tokenParsed.family_name || ""}`.trim() || tokenParsed.preferred_username || "",
      roles: tokenParsed.realm_access?.roles || []
    };
  };
  const hasRole = (role) => {
    const userRoles = getUserInfo()?.roles || [];
    return userRoles.includes(role);
  };
  const hasAnyRole = (roles) => {
    const userRoles = getUserInfo()?.roles || [];
    return roles.some((role) => userRoles.includes(role));
  };
  watch([isAuthenticated, isInitialized], () => {
    if (isInitialized.value) {
      initializeUserData();
    }
  }, { immediate: true });
  nextTick(() => {
    if (isInitialized.value) {
      initializeUserData();
    }
  });
  return {
    isAuthenticated,
    user,
    token,
    refreshToken,
    isInitialized,
    initError,
    login,
    logout,
    register,
    getToken,
    refreshAuthToken,
    getUserInfo,
    hasRole,
    hasAnyRole,
    updateToken,
    isTokenExpired
  };
};

//# sourceMappingURL=data:application/json;base64,